<?php

// exit if accessed directly
if( ! defined( 'ABSPATH' ) ) exit;


// check if class already exists
if( !class_exists('acf_field_icomoon_select') ) :


class acf_field_icomoon_select extends acf_field {
	
	
	/*
	*  __construct
	*
	*  This function will setup the field type data
	*
	*  @type	function
	*  @date	5/03/2014
	*  @since	5.0.0
	*
	*  @param	n/a
	*  @return	n/a
	*/
	
	function __construct( $settings ) {
		
		/*
		*  name (string) Single word, no spaces. Underscores allowed
		*/
		
		$this->name = 'icomoon_selecticomoon_select';
		
		
		/*
		*  label (string) Multiple words, can include spaces, visible when selecting a field type
		*/
		
		$this->label = __('Icomoon Select', 'acf-icomoon_select');
		
		
		/*
		*  category (string) basic | content | choice | relational | jquery | layout | CUSTOM GROUP NAME
		*/
		
		$this->category = 'content';
		
		
		/*
		*  defaults (array) Array of default settings which are merged into the field object. These are used later in settings
		*/
		
		$this->defaults = array(
			'selection_json_file'	=> '',
			'selection_json_path'	=> get_stylesheet_directory() . '/assets/fonts/selection.json',
		);
		
		
		/*
		*  l10n (array) Array of strings that are used in JavaScript. This allows JS strings to be translated in PHP and loaded via:
		*  var message = acf._e('FIELD_NAME', 'error');
		*/
		
		$this->l10n = array(
			'error'	=> __('Error! Please enter a higher value', 'acf-icomoon_select'),
		);
		
		
		/*
		*  settings (array) Store plugin settings (url, path, version) as a reference for later use with assets
		*/
		
		$this->settings = $settings;
		
		
		// do not delete!
    	parent::__construct();
    	
	}
	
	
	/*
	*  render_field_settings()
	*
	*  Create extra settings for your field. These are visible when editing a field
	*
	*  @type	action
	*  @since	3.6
	*  @date	23/01/13
	*
	*  @param	$field (array) the $field being edited
	*  @return	n/a
	*/
	
	function render_field_settings( $field ) {
		
		/*
		*  acf_render_field_setting
		*
		*  This function will create a setting for your field. Simply pass the $field parameter and an array of field settings.
		*  The array of settings does not require a `value` or `prefix`; These settings are found from the $field array.
		*
		*  More than one setting can be added by copy/paste the above code.
		*  Please note that you must also have a matching $defaults value for the field name (font_size)
		*/

		$allowed_types = get_allowed_mime_types();
		$json_allowed = array_key_exists('json', $allowed_types);

		if ( $json_allowed ) :
			acf_render_field_setting( $field, array(
				'label'			=> __('Selection.json Type', 'acf-icomoon_select'),
				'instructions'	=> '',
				'type'			=> 'select',
				'name'			=> 'selection_json_type',
				'choices'		=> array('selection_json_path' => 'Specify Path', 'selection_json_file' => 'Choose File')
			));
		endif;
		
		$instructions = ( $json_allowed )
			? __('The path to the selection.json file generated by icomoon. Use the path setting to dynamically load the file' ,'acf-icomoon_select')
			: __('The path to the selection.json file generated by icomoon. Use the path setting to dynamically load the file. To upload a file manually, enable json as an upload mime type' ,'acf-icomoon_select');

		acf_render_field_setting( $field, array(
			'label'			=> __('Selection.json Location', 'acf-icomoon_select'),
			'instructions'	=> $instructions,
			'type'			=> 'text',
			'name'			=> 'selection_json_path'
		));

		if ( $json_allowed ) :
			acf_render_field_setting( $field, array(
				'label'			=> __('Selection.json File', 'acf-icomoon_select'),
				'instructions'	=> __('The selection.json file generated by icomoon' ,'acf-icomoon_select'),
				'type'			=> 'file',
				'name'			=> 'selection_json_file'
			));
		endif;

		acf_render_field_setting( $field, array(
			'label'			=> __('Icon Size', 'acf-icomoon_select'),
			'instructions'	=> __('The preview size' ,'acf-icomoon_select'),
			'type'			=> 'select',
			'name'			=> 'preview_size',
			'choices'		=> array('20' => '20', '24' => '24', '32' => '32', '64' => '64')
		));

		acf_render_field_setting( $field, array(
			'label'			=> __('Display as', 'acf-icomoon_select'),
			'type'			=> 'select',
			'name'			=> 'display_type',
			'choices'		=> array('icon' => 'Icon Element', 'svg' => 'SVG Element')
		));

	}
	
	
	
	/*
	*  render_field()
	*
	*  Create the HTML interface for your field
	*
	*  @param	$field (array) the $field being rendered
	*
	*  @type	action
	*  @since	3.6
	*  @date	23/01/13
	*
	*  @param	$field (array) the $field being edited
	*  @return	n/a
	*/
	
	function render_field( $field ) {
		$path = ( $field['selection_json_type'] == 'selection_json_path' )
			? $field['selection_json_path'] : get_attached_file($field['selection_json_file']);
		$choices = $this->get_icomoon_json($path, $field);

		$value = esc_attr($field['value']);
		$out = '<div class="acf-icomoon_select-selection">';
		
		$out .= '<button class="button" data-acf-icomoon-select-choose-button';
		if ( $value && $value !== '' ) $out .= ' style="display:none;"';
		$out .= '>' . __('Select Icon', 'acf-icomoon_select') . '</button>';
		$out .= '<button class="button" data-acf-icomoon-select-cancel-button style="display:none;">' . __('Cancel', 'acf-icomoon_select') . '</button>';

		// The Icon Preview
		$out .= '<div class="icon-preview" data-icomoon-icon-preview';
		if ( !$value || $value == '' ) $out .= ' style="display:none;"';
		$out .= '>';
		if ( $value && $value !== '' ){
			$out .= $choices[$value]->icon_paths_formatted;
			$out .= '<p>' . $value . '<br><a href="#" data-acf-icomoon-remove-choice>' . __('Remove', 'acf-icomoon_select') . '</a></p>';
		}
		$out .= '</div><!-- .preview -->';

		$out .= '<div class="acf-icomoon_select-icon-list">';
		$out .= '<p class="icons-description">' . count($choices) . ' ' . __('Icons Available', 'acf-icomoon_select') . '</p>';
			foreach ( $choices as $choice ) :
				$out .= '<div class="choice';
				if ( $choice->name == $value ) $out .= ' active';
				$out .= '" data-acf-icomoon-choice="' . $choice->name . '">';
				$out .= '<div class="svg">' . $choice->icon_paths_formatted . '</div>';
				$out .= '</div>';
			endforeach;
		$out .= '</div>';

		$out .= '</div>';
		echo $out
		
		/*
		*  Create a simple text input using the 'font_size' setting.
		*/
		
		?>

		<input type="hidden" name="<?php echo esc_attr($field['name']) ?>" value="<?php echo $value; ?>" data-acf-icomoon-choice-field />
		<?php
	}

	/*
	*  get_icomoon_json_from_path()
	*
	*  Get the icomoon json from a file path
	*
	*
	*
	*  @return	array
	*/
	function get_icomoon_json($path, $field) {
		$icon_size = ( $field['preview_size'] ) ? $field['preview_size'] : '32';
		$json = file_get_contents($path);
		$data = json_decode($json);
		$prefix = $data->preferences->fontPref->prefix;		
		$choices = array();
		foreach($data->icons as $object){
			$choices[$object->properties->name] = new stdClass;
			$choices[$object->properties->name]->icon_paths = $object->icon->paths;
			$choices[$object->properties->name]->name = $object->properties->name;
			$choices[$object->properties->name]->name_prefixed = $prefix . $object->properties->name;
			
			// Format the SVG path
			$formatted_path = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="' . $icon_size . '" height="' . $icon_size . '" viewBox="0 0 1024 1024"><title>' . $object->properties->name . '</title>';
			foreach( $object->icon->paths as $path ){
				$formatted_path .= '<path fill="#444" d="' . $path . '"></path>';
			}
			$formatted_path .= '</svg>';
			$choices[$object->properties->name]->icon_paths_formatted = $formatted_path;
		}
		return $choices;
	}	
		
	/*
	*  input_admin_enqueue_scripts()
	*
	*  This action is called in the admin_enqueue_scripts action on the edit screen where your field is created.
	*  Use this action to add CSS + JavaScript to assist your render_field() action.
	*
	*  @type	action (admin_enqueue_scripts)
	*  @since	3.6
	*  @date	23/01/13
	*
	*  @param	n/a
	*  @return	n/a
	*/

	
	
	function input_admin_enqueue_scripts() {
		
		// vars
		$url = $this->settings['url'];
		$version = $this->settings['version'];
		
		
		// register & include JS
		wp_register_script( 'acf-input-icomoon_select', "{$url}assets/js/input.js", array('acf-input'), $version );
		wp_enqueue_script('acf-input-icomoon_select');
		
		
		// register & include CSS
		wp_register_style( 'acf-input-icomoon_select', "{$url}assets/css/input.css", array('acf-input'), $version );
		wp_enqueue_style('acf-input-icomoon_select');
		
	}
	
	
	
	
	/*
	*  input_admin_head()
	*
	*  This action is called in the admin_head action on the edit screen where your field is created.
	*  Use this action to add CSS and JavaScript to assist your render_field() action.
	*
	*  @type	action (admin_head)
	*  @since	3.6
	*  @date	23/01/13
	*
	*  @param	n/a
	*  @return	n/a
	*/

	/*
		
	function input_admin_head() {
	
		
		
	}
	
	*/
	
	
	/*
   	*  input_form_data()
   	*
   	*  This function is called once on the 'input' page between the head and footer
   	*  There are 2 situations where ACF did not load during the 'acf/input_admin_enqueue_scripts' and 
   	*  'acf/input_admin_head' actions because ACF did not know it was going to be used. These situations are
   	*  seen on comments / user edit forms on the front end. This function will always be called, and includes
   	*  $args that related to the current screen such as $args['post_id']
   	*
   	*  @type	function
   	*  @date	6/03/2014
   	*  @since	5.0.0
   	*
   	*  @param	$args (array)
   	*  @return	n/a
   	*/
   	
   	/*
   	
   	function input_form_data( $args ) {
	   	
		
	
   	}
   	
   	*/
	
	
	/*
	*  input_admin_footer()
	*
	*  This action is called in the admin_footer action on the edit screen where your field is created.
	*  Use this action to add CSS and JavaScript to assist your render_field() action.
	*
	*  @type	action (admin_footer)
	*  @since	3.6
	*  @date	23/01/13
	*
	*  @param	n/a
	*  @return	n/a
	*/

	/*
		
	function input_admin_footer() {
	
		
		
	}
	
	*/
	
	
	/*
	*  field_group_admin_enqueue_scripts()
	*
	*  This action is called in the admin_enqueue_scripts action on the edit screen where your field is edited.
	*  Use this action to add CSS + JavaScript to assist your render_field_options() action.
	*
	*  @type	action (admin_enqueue_scripts)
	*  @since	3.6
	*  @date	23/01/13
	*
	*  @param	n/a
	*  @return	n/a
	*/

	/*
	
	function field_group_admin_enqueue_scripts() {
		
	}
	
	*/

	
	/*
	*  field_group_admin_head()
	*
	*  This action is called in the admin_head action on the edit screen where your field is edited.
	*  Use this action to add CSS and JavaScript to assist your render_field_options() action.
	*
	*  @type	action (admin_head)
	*  @since	3.6
	*  @date	23/01/13
	*
	*  @param	n/a
	*  @return	n/a
	*/

	/*
	
	function field_group_admin_head() {
	
	}
	
	*/


	/*
	*  load_value()
	*
	*  This filter is applied to the $value after it is loaded from the db
	*
	*  @type	filter
	*  @since	3.6
	*  @date	23/01/13
	*
	*  @param	$value (mixed) the value found in the database
	*  @param	$post_id (mixed) the $post_id from which the value was loaded
	*  @param	$field (array) the field array holding all the field options
	*  @return	$value
	*/
	function load_value( $value, $post_id, $field ) {
		if ( is_admin() ) return $value;
		$path = ( $field['selection_json_type'] == 'selection_json_path' )
			? $field['selection_json_path'] : get_attached_file($field['selection_json_file']);
		$choices = $this->get_icomoon_json($path, $field);
		if ( !array_key_exists($value, $choices) ) return '';
		if ( $field['display_type'] == 'icon' ) return $choices[$value]->name_prefixed;
		if ( $field['display_type'] == 'paths_raw' ) return $choices[$value]->icon_paths;
		return $choices[$value]->icon_paths_formatted;
	}
	
	
	
	
	/*
	*  update_value()
	*
	*  This filter is applied to the $value before it is saved in the db
	*
	*  @type	filter
	*  @since	3.6
	*  @date	23/01/13
	*
	*  @param	$value (mixed) the value found in the database
	*  @param	$post_id (mixed) the $post_id from which the value was loaded
	*  @param	$field (array) the field array holding all the field options
	*  @return	$value
	*/
	
	/*
	
	function update_value( $value, $post_id, $field ) {
		
		return $value;
		
	}
	
	*/
	
	
	/*
	*  format_value()
	*
	*  This filter is appied to the $value after it is loaded from the db and before it is returned to the template
	*
	*  @type	filter
	*  @since	3.6
	*  @date	23/01/13
	*
	*  @param	$value (mixed) the value which was loaded from the database
	*  @param	$post_id (mixed) the $post_id from which the value was loaded
	*  @param	$field (array) the field array holding all the field options
	*
	*  @return	$value (mixed) the modified value
	*/
		
	/*
	
	function format_value( $value, $post_id, $field ) {
		
		// bail early if no value
		if( empty($value) ) {
		
			return $value;
			
		}
		
		
		// apply setting
		if( $field['font_size'] > 12 ) { 
			
			// format the value
			// $value = 'something';
		
		}
		
		
		// return
		return $value;
	}
	
	*/
	
	
	/*
	*  validate_value()
	*
	*  This filter is used to perform validation on the value prior to saving.
	*  All values are validated regardless of the field's required setting. This allows you to validate and return
	*  messages to the user if the value is not correct
	*
	*  @type	filter
	*  @date	11/02/2014
	*  @since	5.0.0
	*
	*  @param	$valid (boolean) validation status based on the value and the field's required setting
	*  @param	$value (mixed) the $_POST value
	*  @param	$field (array) the field array holding all the field options
	*  @param	$input (string) the corresponding input name for $_POST value
	*  @return	$valid
	*/
	
	/*
	
	function validate_value( $valid, $value, $field, $input ){
		
		// Basic usage
		if( $value < $field['custom_minimum_setting'] )
		{
			$valid = false;
		}
		
		
		// Advanced usage
		if( $value < $field['custom_minimum_setting'] )
		{
			$valid = __('The value is too little!','acf-icomoon_select'),
		}
		
		
		// return
		return $valid;
		
	}
	
	*/
	
	
	/*
	*  delete_value()
	*
	*  This action is fired after a value has been deleted from the db.
	*  Please note that saving a blank value is treated as an update, not a delete
	*
	*  @type	action
	*  @date	6/03/2014
	*  @since	5.0.0
	*
	*  @param	$post_id (mixed) the $post_id from which the value was deleted
	*  @param	$key (string) the $meta_key which the value was deleted
	*  @return	n/a
	*/
	
	/*
	
	function delete_value( $post_id, $key ) {
		
		
		
	}
	
	*/
	
	
	/*
	*  load_field()
	*
	*  This filter is applied to the $field after it is loaded from the database
	*
	*  @type	filter
	*  @date	23/01/2013
	*  @since	3.6.0	
	*
	*  @param	$field (array) the field array holding all the field options
	*  @return	$field
	*/
	
	/*
	
	function load_field( $field ) {
		
		return $field;
		
	}	
	
	*/
	
	
	/*
	*  update_field()
	*
	*  This filter is applied to the $field before it is saved to the database
	*
	*  @type	filter
	*  @date	23/01/2013
	*  @since	3.6.0
	*
	*  @param	$field (array) the field array holding all the field options
	*  @return	$field
	*/
	
	/*
	
	function update_field( $field ) {
		
		return $field;
		
	}	
	
	*/
	
	
	/*
	*  delete_field()
	*
	*  This action is fired after a field is deleted from the database
	*
	*  @type	action
	*  @date	11/02/2014
	*  @since	5.0.0
	*
	*  @param	$field (array) the field array holding all the field options
	*  @return	n/a
	*/
	
	/*
	
	function delete_field( $field ) {
		
		
		
	}	
	
	*/
	
	
}


// initialize
new acf_field_icomoon_select( $this->settings );


// class_exists check
endif;

?>